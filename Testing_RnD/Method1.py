# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ruyrGBo8LJI1dnRnkym2t8dxxjJBFv-B
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv(r"C:\Users\Aseem\Desktop\GIT\EV-Vehicle-Battery Optimization\data\Electric Vehicle Trip Energy Consumption Data.csv")

data.head()

data.info()

# ---- Drop Faltu Columns ----
df = data.drop(columns=[
    "Vehicle ID",
    "Time of Day",
    "Day of the Week",
    "Longitude",
    "Latitude"
], errors="ignore")

# ---- Feature Engineering ----

# 1. Average Consumption per km
df["Energy_per_km"] = df["Trip Energy Consumption"] / df["Trip Distance"].replace(0, 1)

# 2. Average Speed
df["Avg_Speed"] = df["Trip Distance"] / df["Trip Time Length"].replace(0, 1)

# 3. Traffic Condition (categorical)
def traffic_condition(speed):
    if speed > 50:
        return "Light"
    elif speed > 30:
        return "Medium"
    else:
        return "Heavy"

df["Traffic_Condition"] = df["Avg_Speed"].apply(traffic_condition)

# 4. Battery Temperature Delta
df["Battery_Delta_T"] = (
    df["Maximum Cell Temperature of Battery"] - df["Minimum Cell Temperature of Battery"]
)

# 5. Power Draw (Watts)
df["Power_Draw"] = df["Current"] * df["Total Voltage"]

# 6. Efficiency (km per unit energy)
df["Efficiency"] = df["Trip Distance"] / df["Trip Energy Consumption"].replace(0, 1)

# ---- Save Cleaned Dataset ----
df.to_csv("processed_ev_data.csv", index=False)

print("âœ… Dataset processed and saved as 'processed_ev_data.csv'")
print("Columns now available:", df.columns.tolist())

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor

# Load processed dataset
df = pd.read_csv(r"C:\Users\Aseem\Desktop\GIT\EV-Vehicle-Battery Optimization\notebooks\processed_ev_data.csv")

# -------- Target & Features --------
target = "Energy_per_km"   # ya "Trip Energy Consumption"
X = df.drop(columns=[target])
y = df[target]

# Identify categorical & numerical features
categorical = ["Traffic_Condition", "Mode"] if "Mode" in df.columns else ["Traffic_Condition"]
numerical = [col for col in X.columns if col not in categorical]

# Preprocessing
preprocessor = ColumnTransformer([
    ("num", StandardScaler(), numerical),
    ("cat", OneHotEncoder(handle_unknown="ignore"), categorical)
])

# Model
models = {
    "RandomForest": RandomForestRegressor(n_estimators=200, random_state=42),
    "GradientBoosting": GradientBoostingRegressor(n_estimators=200, random_state=42)
}

# Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

results = {}

for name, model in models.items():
    pipe = Pipeline([
        ("preprocess", preprocessor),
        ("model", model)
    ])
    pipe.fit(X_train, y_train)
    y_pred = pipe.predict(X_test)

    results[name] = {
        "R2": r2_score(y_test, y_pred),
        "MAE": mean_absolute_error(y_test, y_pred),
        "RMSE": np.sqrt(mean_squared_error(y_test, y_pred)) # Removed squared=False and added np.sqrt
    }

# Show Results
for model, metrics in results.items():
    print(f"\nðŸ“Š {model} Performance:")
    for m, v in metrics.items():
        print(f"{m}: {v:.4f}")

import joblib
joblib.dump(pipe, "ev_energy_model.pkl")

